// /*
// 1. Напиши функцию, которая создает локальную переменную и выводит её значение.
//     Попробуй получить доступ к этой переменной вне функции и объясни, что произошло;*/
//
function getName() {
    const user = 'Kirill';
    console.log('Внутри функции:', user);

    return user
}

getName()

// Пытаюсь вызвать снаружи функции
console.log('Снаружи функции:', user);
getName()
//
//
// /*
// Объяснение:
// Переменная user существует только внутри функции getName.
// При попытке доступа к ней вне функции возникает ошибка.
// Это демонстрирует работу локальной области видимости в JS.
// */


// 2. Создай блок с условием и объяви переменную внутри него.
// Попробуй получить доступ к этой переменной вне блока и объясни результат;


if (true) {
    // var getName = 'Переменная внутри блока';
    const getName = 'Переменная внутри блока';
    console.log(getName) // Переменная внутри блока
}
console.log(getName) // Будет ошибка
// Но если использовать var место let и const то наружный
console.log() // выведет без ошибки.
    // var - функциональную область видимости будет доступна вне блока
    //  а у let и const блочная
    //  доступна только в блоке
// var не используем только let и const


// 3. Изучи, что такое hoisting в JavaScript и расскажи своими словами,
//     что это такое и какие проблемы с ним связаны. Приведи примеры :)

// Переменные
// Всплытие не работает если переменные объявлены через let и const


console.log(a)

const a = 5;



console.log(a)

var a = 5;


/*Объявления переменных (var) и функций (function declaration) поднимаются
вверх своей области видимости перед выполнением кода.
Но инициализация (присвоение значения) остаётся на месте.*/


// Через функцию всплытие работает
console.log(sumFunc(1, 2))
function sumFunc(a, b) {
    return a + b
}

console.log(sumFunc(1, 2))


// Вывод:
// Использовать const/let вместо var — они предсказуемее.
// Hoisting может приводить к трудноуловимым багам, если его не понимать.