/*
1. Создай объект student с вложенными объектами и массивами. Затем создай поверхностную копию этого объекта
(разными способами!) и измени вложенные структуры (массивы, объекты) у копии, распечатай их. Затем распечатай те же
свойства у оригинала, чтобы увидеть, как на нем отразились изменения. Объясни своими словами, что произошло;*/

// const student = {
//     Department: "Construction",
//     studentName: {
//         name: "Oleg"
//     },
//     courses: [1, 2, 3, 4, 5]
// };
//
//
// const newStudent = {...student};
// newStudent.studentName.name = "bob";
//
//
// // При поверхностном копирование меняется и оригинал
// console.log('Ориг:', student.studentName.name)
// console.log('Копия:', newStudent.studentName.name)


/*2. Создать копию объекта, внутри которого есть методы (функции),
    с помощью использовать JSON методов. Затем попробуй вызывать
метод у копии объекта. Объясни своими словами, что произошло;*/

// const original = {
//     studentName: {
//         name: "Oleg"
//     }
// };
//
// const deepCopyObj = JSON.parse(JSON.stringify(original));
// console.log(deepCopyObj)

/*
При использовании JSON.stringify объект преобразуется в строку JSON, а функции при
этом исключаются из результата, потому что JSON не поддерживает функции.
Когда мы делаем JSON.parse, мы восстанавливаем объект из этой строки — уже без функций*/


/*
3*. Проанализируй и разбери функцию глубокого копирования из урока (function deepCopy).
Покрой каждую строчку кода комментариями, которые объясняют, что делает этот кусок кода и
зачем. То есть после этого задания у тебя должно сложиться полное понимание того, как работает
эта функция, чтобы в дальнейшем ты смог ее применить!*/

function deepCopy(obj) {

    // Если obj равен null или не является объектом (примитив: число, строка, boolean и т.д.)
    // просто возвращаем его (примитивы копируются по значению)
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }

    // Определяем тип переданного значения - массив или обычный объект
    // и создаем соответствующую пустую структуру для копии
    const copy = Array.isArray(obj) ? [] : {};

    // Перебираем все собственные (не унаследованные) свойства объекта
    for (let key in obj) {
        // Проверяем, что свойство принадлежит самому объекту,
        // а не его прототипу (игнорируем унаследованные свойства)
        if (obj.hasOwnProperty(key)) {
            // Рекурсивно копируем каждое свойство объекта/элемент массива
            // Это позволяет обрабатывать любую глубину вложенности
            copy[key] = deepCopy(obj[key]);
        }
    }
    // Возвращаем готовую глубокую копию
    return copy;
}

const original = { a: 1, b: { c: 2 } };

// Создаем глубокую копию
const deepCopyObj = deepCopy(original);

// Модифицируем копию
deepCopyObj.b.c = 3;

// Проверяем, что оригинал не изменился
console.log(original.b.c); // 2 значение осталось прежним